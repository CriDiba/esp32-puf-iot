import { stringify } from 'csv-stringify/sync'
import { writeFile } from 'fs'
import { CSV_OUT_DIR } from './config'
import { logger } from './log'
import { calculateResponse, getRandomChallenge } from './puf'

export function exportCsvData(records: Array<unknown>) {
  // converts records to csv
  const output = stringify(records)

  const timestamp = Math.floor(Date.now() / 1000)

  writeFile(`${CSV_OUT_DIR}/export_${timestamp}.csv`, output, (error) => {
    if (error) {
      logger.error('error in write csv file', { error })
    }

    logger.info('csv file written successfully')
  })
}

// const numToBuffer = (num: bigint) => {
//   const buf = Buffer.alloc(8, 0)
//   buf.writeBigUInt64BE(num)
//   return buf
// }

const crp: Array<{ c: string; r: string }> = []

const pufBuffer = Buffer.from([
  0x88, 0x70, 0xc8, 0x9b, 0x2c, 0xfb, 0x00, 0x4c, 0x6b, 0x4d, 0x02, 0x90, 0x49, 0x79, 0x66, 0x2b, 0x83, 0x58, 0x4f,
  0x1d, 0x1f, 0x2f, 0x0a, 0x77, 0x9a, 0xe9, 0x5e, 0x25, 0x71, 0x16, 0xae, 0x1e, 0x30, 0xbf, 0x3f, 0xb2, 0xd2, 0xee,
  0xf3, 0x9c, 0x36, 0xe1, 0x7a, 0xa0, 0x79, 0xa1, 0xe7, 0x91, 0x8e, 0x7f, 0x83, 0x79, 0xaa, 0x6f, 0xc4, 0x1e, 0xe8,
  0x8e, 0xdf, 0x04, 0xe2, 0x77, 0x1e, 0xe7, 0x43, 0xb5, 0x7f, 0x25, 0x58, 0x3d, 0x20, 0x12, 0x49, 0x8e, 0xb0, 0xc1,
  0x93, 0x97, 0x9a, 0xc2, 0x33, 0xda, 0x1c, 0xa9, 0x96, 0xc7, 0xf9, 0x48, 0x6d, 0xef, 0x70, 0xfd, 0x70, 0x34, 0x85,
  0x09, 0xbc, 0x37, 0x15, 0x71, 0xce, 0x78, 0xc0, 0xb6, 0x27, 0x7c, 0xd3, 0x68, 0xec, 0xa3, 0xbb, 0x07, 0xfc, 0xd4,
  0x5a, 0x50, 0x44, 0xea, 0x2e, 0xe1, 0x97, 0x72, 0xd6, 0xae, 0x63, 0xd5, 0x3e, 0x72, 0x16, 0xf4, 0x72, 0x38, 0xd2,
  0xe8, 0xdf, 0x69, 0xf5, 0xc7, 0x75, 0x93, 0x2f, 0xeb, 0xf2, 0x3a, 0x4f, 0x72, 0x38, 0x9f, 0x1c, 0x0b, 0x2f, 0xf1,
  0x2f, 0x36, 0xd7, 0x5d, 0xef, 0x91, 0xd1, 0xc3, 0x2f, 0x25, 0x6b, 0x00, 0x94, 0xdf, 0x5e, 0x3c, 0x0b, 0x9b, 0x4e,
  0xfc, 0x95, 0xb2, 0xe6, 0x57, 0x42, 0x01, 0xb3, 0xdf, 0xdb, 0xc5, 0xa6, 0xb8, 0xa8, 0xca, 0x6d, 0x3a, 0xd8, 0x0c,
  0x21, 0xfc, 0x9b, 0x26, 0xe3, 0xfa, 0x68, 0xce, 0xd2, 0x03, 0x55, 0x7d, 0x1e, 0xfc, 0xe5, 0x3d, 0xb0, 0x07, 0x5e,
  0x7b, 0xdb, 0x12, 0x29, 0x6c, 0xaf, 0x23, 0x3a, 0x8c, 0x6a, 0x9d, 0xcd, 0xc1, 0x65, 0xd6, 0xd6, 0xc6, 0xd1, 0xf2,
  0xd6, 0x20, 0x0b, 0x3d, 0xd1, 0x29, 0xdc, 0x30, 0x98, 0x4b, 0x40, 0x57, 0xd5, 0xb1, 0xdf, 0xa9, 0x21, 0x82, 0x63,
  0xfd, 0x91, 0xf4, 0xfa, 0x6c, 0x41, 0x0d, 0x6a, 0x13, 0x23, 0xad, 0x9e, 0xe5, 0x0a, 0xce, 0xfc, 0x2c, 0x6e, 0xa1,
  0xf8, 0x35, 0xf8, 0xff, 0xd8, 0xaf, 0xf1, 0x1f, 0x0c, 0xc1, 0x72, 0x82, 0xc6, 0x88, 0x29, 0xc8, 0xc3, 0xd2, 0x79,
  0x81, 0xe2, 0x61, 0x69, 0xec, 0xf9, 0x54, 0x91, 0x1d, 0x1f, 0x4d, 0xa9, 0xcf, 0xbf, 0xf5, 0x30, 0x36, 0xb9, 0xfc,
  0x4a, 0xd9, 0x3f, 0x17, 0x9e, 0xfb, 0x39, 0x05, 0xc1, 0xd1, 0x4b, 0x71, 0x35, 0x6d, 0x62, 0x25, 0x67, 0x42, 0x95,
  0x3c, 0xef, 0x13, 0x69, 0xa8, 0x7a, 0xbb, 0xe3, 0x76, 0x96, 0x43, 0xda, 0x6c, 0xd8, 0x6f, 0x66, 0xa7, 0x7e, 0x42,
  0xed, 0x91, 0xbf, 0x36, 0x00, 0x6c, 0xf2, 0xc7, 0x39, 0x14, 0x29, 0x42, 0x22, 0xe9, 0x45, 0xc7, 0x11, 0xc3, 0x79,
  0xdc, 0xaa, 0xc0, 0xea, 0x71, 0x33, 0x16, 0x60, 0xaa, 0x17, 0x38, 0xcc, 0xa4, 0x21, 0x79, 0x04, 0x65, 0xe5, 0xf8,
  0xf7, 0x3d, 0xa6, 0x93, 0xb7, 0xaf, 0xe7, 0xe3, 0x73, 0x62, 0x93,
])

const PUF = pufBuffer.subarray(0, 4).toString('hex')

for (let i = 0; i < 1000000; i++) {
  const hexChallenge = getRandomChallenge()
  const hexResponse = calculateResponse(PUF, hexChallenge)
  crp.push({ c: hexChallenge, r: hexResponse })
}

exportCsvData(crp)
